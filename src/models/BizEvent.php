<?php

namespace ccheng\eventmanager\models;

use ccheng\eventmanager\common\simple_html_dom\SimpleHtmlDom;
use ccheng\eventmanager\helpers\ImageHelper;
use ccheng\eventmanager\helpers\StringHelper;
use Yii;
use yii\base\DynamicModel;
use yii\base\UserException;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\Url;
use yii\validators\ImageValidator;
use yii\web\UploadedFile;

/**
 * This is the model class for table "biz_event".
 *
 * @property integer $event_id
 * @property string  $event_name
 * @property string  $event_content
 * @property string  $event_image
 * @property integer $event_year
 * @property string  $event_month
 * @property string  $event_date
 * @property string  $event_time
 * @property string  $event_create_at
 * @property string  $event_update_at
 * @property string  $event_from_system
 * @property string  $event_author
 * @property string  $event_level
 * @property string  $event_user_id
 */
class BizEvent extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'biz_event';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [
                ['event_name', 'event_content', 'event_date', 'event_author', 'event_level', 'event_from_system'],
                'required',
            ],
            [['event_content'], 'string'],
            [['event_year'], 'integer'],
            [['event_date', 'event_create_at', 'event_update_at'], 'safe'],
            [['event_name'], 'string', 'max' => 200],
            [['event_month'], 'string', 'max' => 7],
            [['event_from_system'], 'string', 'max' => 16],
            [['event_author'], 'string', 'max' => 32],
            [
                'event_year',
                'filter',
                'filter' => function ($value) {
                    return date('Y', strtotime($this->event_date));
                },
            ],
            [
                'event_month',
                'filter',
                'filter' => function ($value) {
                    return date('Y-m', strtotime($this->event_date));
                },
            ],
            [
                'event_time',
                'filter',
                'filter' => function ($value) {
                    return date('H:i:s', strtotime($this->event_date));
                },
            ],
            [
                'event_from_system',
                'in',
                'range' => array_keys(call_user_func(\Yii::$app->params['event_manager_config'])['event_system']),
            ],
            [
                'event_user_id',
                'default',
                'value' => function () {
                    return \Yii::$app->user->identity ? \Yii::$app->user->identity->getId() : 0;
                },
            ],
            ['event_content',function($attribute, $params){
                if(strip_tags($this->$attribute)){
                    return true;
                }else{
                    $this->addError($attribute,'事件内容必须有文本描述！');
                    return false;
                }
            }],
            ['event_content','filter','filter'=>[$this, 'filterEventContent'],'skipOnEmpty' => true]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'event_id'          => '事件 ID',
            'event_name'        => '事件名称',
            'event_content'     => '事件内容',
            'event_year'        => '事件所属年',
            'event_image'       => '事件图片',
            'event_month'       => '事件所属月',
            'event_date'        => '事件所属日',
            'event_create_at'   => '添加时间',
            'event_update_at'   => '更新时间',
            'event_from_system' => '来源系统',
            'event_author'      => '添加人员',
            'event_level'       => '事件级别',
            'event_time'        => '发生时间',
        ];
    }

    public function behaviors()
    {
        return [
            [
                'class'      => TimestampBehavior::className(),
                'attributes' => [
                    \yii\db\ActiveRecord::EVENT_BEFORE_INSERT => [
                        'event_create_at',
                        'event_update_at',
                    ],
                    \yii\db\ActiveRecord::EVENT_BEFORE_UPDATE => ['event_update_at'],
                ],
                'value'      => new Expression('NOW()'),
            ],
        ];
    }

    public function beforeSave($insert)
    {
        $this->event_date = date('Y-m-d', strtotime($this->event_date));

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function beforeValidate()
    {
        $upload_img = UploadedFile::getInstanceByName('event_image');
        if ($upload_img) {
            $uploadModel = new DynamicModel(['event_image' => $upload_img]);
            $uploadModel->addRule(['event_image'], ImageValidator::class, [
                'maxWidth'       => 150,
                'maxHeight'      => 150,
                'extensions'     => 'png,jpg,jpeg',
                'uploadRequired' => false,
                'skipOnEmpty'    => true,
            ]);
            if ($uploadModel->validate()) {
                $temp_path = Yii::getAlias('@runtime') . '/event_file_temp/';
                if (!is_dir($temp_path)) {
                    if (!mkdir($temp_path, 0777, true)) {
                        throw new UserException('服务器存储失败，请联系管理员！');
                    }
                }
                $save_path = $temp_path . $upload_img->name;
                if (!$upload_img->saveAs($save_path)) {
                    throw new UserException('服务器存储失败，请联系管理员！');
                }

                $event_image = ImageHelper::img_base64($save_path);
                if ($event_image) {
                    $this->event_image = $event_image;
                } else {
                    $this->addError('event_image', '图像读取异常');

                    return false;
                }
            } else {
                $this->addError('event_image', $uploadModel->getFirstError('event_image'));

                return false;
            }
        }

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    public function filterEventContent($value){
        $content=SimpleHtmlDom::str_get_html($value);
        $content->set_callback(function ($e){
            if($e->tag=='img'){
                if(StringHelper::isUrl($e->src)){
                    $imageInfo=ImageHelper::myGetImageSize($e->src);
                    $showInfo=ImageHelper::getImageScale($imageInfo['width'],$imageInfo['height']);
                    $e->setAttribute('width',$showInfo['width']);
                    $e->setAttribute('height',$showInfo['height']);
                    $e->setAttribute("onclick","window.open(this.src,'_blank')");
                }
            }
        });
        return $content->save();
    }
}
